To use, you simply replace "ssh" command with "sshlm".
It passes all its parameters to ssh unmodified.

By default, sshlm starts in char-by-char mode so everything is the same as
when using regular ssh. However, when you press "ctrl-]" hotkey, local line
editing mode pops up (indicated by underlined "L"), where you can use all
GNU Readline functionality (command recall, command line editing etc).

REQUIREMENTS:
- sshlm wrapper is written in perl, and requires several perl modules.
  (Term::ReadLine IO::Pty::Easy Term::ReadKey)
  Modules can be installed manually from http://cpan.org/ or in Debian-based distributions by:
  "apt-get install libterm-readline-gnu-perl libio-pty-easy-perl libterm-readkey-perl"
  It also requires any command-line ssh client of your choice (like openssh-client).


BUGS:
- <tab> key will not do what you want (remote filename completion).
  This is very hard (if not impossible) to do properly.
  Instead, it will do LOCAL filename completition by default.

  Alternatively, if you want <tab> to finish the local line editing,
  fallback to char-by-char mode and send local input so far (including tab)
  for processing to remote side, put following lines in your ~/.inputrc 
  (quotes and all):

  $if sshlm  
  "\C-i": sshlm-accept-line-immed
  $endif

- FIXME - implement prompt auto-detection to enter line mode automatically,
  so hotkey need not be pressed every time

- FIXME - lines entered in local mode currently gets echoed twice (once
  locally by readline, once by remote shell in response to receiving them).
  Should fix that. Also "[L]" prompt should get erased.

- FIXME - should ignore signals; currently ctrl-c and friends kill sshlm
  which we don't want.

- FIXME - ctrl-d (EOF) on readline input should terminate sesion.
  currently you need to press it twice.
